Shortest path:

Dijkstras algorithm:
Dijkstra’s algorithm is very similar to Prim’s algorithm for minimum spanning tree. Like Prim’s MST, 
we generate a SPT (shortest path tree) with given source as root. We maintain two sets, one set contains 
vertices included in shortest path tree, other set includes vertices not yet included in shortest path 
tree. At every step of the algorithm, we find a vertex which is in the other set (set of not yet included) 
and has a minimum distance from the source.

Below are the detailed steps used in Dijkstra’s algorithm to find the shortest path from a single source 
vertex to all other vertices in the given graph.
Algorithm
1) Create a set sptSet (shortest path tree set) that keeps track of vertices included in shortest path 
tree, i.e., whose minimum distance from source is calculated and finalized. Initially, this set is empty.
2) Assign a distance value to all vertices in the input graph. Initialize all distance values as INFINITE. 
Assign distance value as 0 for the source vertex so that it is picked first.
3) While sptSet doesn’t include all vertices
….a) Pick a vertex u which is not there in sptSet and has minimum distance value.
….b) Include u to sptSet.
….c) Update distance value of all adjacent vertices of u. To update the distance values, iterate through 
all adjacent vertices. For every adjacent vertex v, if sum of distance value of u (from source) and weight 
of edge u-v, is less than the distance value of v, then update the distance value of v.


Bellman ford :
Input: Graph and a source vertex src
Output: Shortest distance to all vertices from src. If there is a negative weight cycle, then shortest 
distances are not calculated, negative weight cycle is reported.

1) This step initializes distances from source to all vertices as infinite and distance to source itself 
as 0. Create an array dist[] of size |V| with all values as infinite except dist[src] where src is source 
vertex.


2) This step calculates shortest distances. Do following |V|-1 times where |V| is the number of vertices 
in given graph.
…..a) Do following for each edge u-v
………………If dist[v] > dist[u] + weight of edge uv, then update dist[v]
………………….dist[v] = dist[u] + weight of edge uv

3) This step reports if there is a negative weight cycle in graph. Do following for each edge u-v
……If dist[v] > dist[u] + weight of edge uv, then “Graph contains negative weight cycle”
The idea of step 3 is, step 2 guarantees shortest distances if graph doesn’t contain negative weight cycle. 
If we iterate through all edges one more time and get a shorter path for any vertex, then there is a 
negative weight cycle

How does this work? Like other Dynamic Programming Problems, the algorithm calculate shortest paths in 
bottom-up manner. It first calculates the shortest distances which have at-most one edge in the path. 
Then, it calculates shortest paths with at-most 2 edges, and so on. After the i-th iteration of outer loop, 
the shortest paths with at most i edges are calculated. There can be maximum |V| – 1 edges in any simple 
path, that is why the outer loop runs |v| – 1 times. The idea is, assuming that there is no negative 
weight cycle, if we have calculated shortest paths with at most i edges, then an iteration over all 
edges guarantees to give shortest path with at-most (i+1) edges (Proof is simple, you can refer this 
or MIT Video Lecture)

All pair shortest path :

Floyd warshall : 
